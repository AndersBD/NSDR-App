-- Create wellbeing_options table
create table if not exists public.wellbeing_options (
  value integer primary key,
  label text not null,
  description text
);

-- Insert wellbeing options
insert into public.wellbeing_options (value, label, description) values
(-2, 'Meget værre', 'Feeling significantly worse than before'),
(-1, 'Lidt værre', 'Feeling slightly worse than before'),
(0, 'Ingen ændring', 'No change in wellbeing'),
(1, 'Lidt bedre', 'Feeling slightly better than before'),
(2, 'Meget bedre', 'Feeling significantly better than before')
on conflict (value) do nothing;

-- Create feedback table with storage object reference
create table public.feedback (
  id bigint primary key generated by default as identity,
  storage_object_id uuid not null,
  wellbeing_change integer not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  constraint feedback_storage_object_fkey foreign key (storage_object_id) references storage.objects(id),
  constraint feedback_wellbeing_change_fkey foreign key (wellbeing_change) references wellbeing_options(value)
);

-- Set up Row Level Security (RLS)
alter table public.feedback enable row level security;

-- Create policy for anonymous feedback submission
create policy "Anyone can submit feedback"
on public.feedback
for insert
using (true)
with check (true);

-- Create index for better query performance 
create index feedback_storage_object_idx on public.feedback(storage_object_id);

-- Create meditations table
create table public.meditations (
  id bigint primary key generated by default as identity,
  title text not null,
  duration integer not null, -- in seconds
  file_name text not null,
  file_url text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Set up Row Level Security (RLS)
alter table public.meditations enable row level security;

-- Meditations policies
create policy "Meditations are viewable by everyone" 
on public.meditations
for select 
using (true);


-- Ensure the meditation_id index exists
create index if not exists feedback_meditation_id_idx on public.feedback(meditation_id);

-- Create indexes for better query performance
create index meditations_created_at_idx on public.meditations(created_at desc);

-- Insert sample meditation data
INSERT INTO public.meditations (title, duration, file_name, file_url) VALUES
('10 Minute Meditation', 600, '10 minutter/meditation_10min.mp3', 'https://your-bucket.supabase.co/storage/v1/object/public/lydfiler-til-nsdr/10%20minutter/meditation_10min.mp3'),
('20 Minute Meditation', 1200, '20 minutter/meditation_20min.mp3', 'https://your-bucket.supabase.co/storage/v1/object/public/lydfiler-til-nsdr/20%20minutter/meditation_20min.mp3'),
('30 Minute Meditation', 1800, '30 minutter/meditation_30min.mp3', 'https://your-bucket.supabase.co/storage/v1/object/public/lydfiler-til-nsdr/30%20minutter/meditation_30min.mp3');


-- Create a function to sync storage files with meditations table
create or replace function sync_meditations_from_storage()
returns trigger
language plpgsql
security definer
as $$
begin
  -- Insert new meditation record when a file is uploaded
  if (TG_OP = 'INSERT') then
    insert into public.meditations (
      title,
      duration,
      file_name,
      file_url
    ) values (
      replace(NEW.name, '.mp3', ''),
      -- Extract duration from path (e.g., '10 minutter' -> 600 seconds)
      (regexp_match(NEW.path, '^(\d+)\s+minutter'))[1]::integer * 60,
      NEW.path || '/' || NEW.name,
      storage.url(NEW.path || '/' || NEW.name)
    );
  end if;
  return NEW;
end;
$$;

-- Create trigger on storage changes
create or replace trigger sync_meditations_trigger
after insert on storage.objects
for each row
when (NEW.bucket_id = 'lydfiler-til-nsdr' and NEW.name like '%.mp3')
execute function sync_meditations_from_storage();