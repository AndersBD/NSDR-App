-- Create wellbeing_options table
create table if not exists public.wellbeing_options (
  value integer primary key,
  label text not null,
  description text
);

-- Insert wellbeing options
insert into public.wellbeing_options (value, label, description) values
(-2, 'Meget værre', 'Feeling significantly worse than before'),
(-1, 'Lidt værre', 'Feeling slightly worse than before'),
(0, 'Ingen ændring', 'No change in wellbeing'),
(1, 'Lidt bedre', 'Feeling slightly better than before'),
(2, 'Meget bedre', 'Feeling significantly better than before')
on conflict (value) do nothing;

-- Create meditations table
create table public.meditations (
  id bigint primary key generated by default as identity,
  title text not null,
  duration integer not null, -- in seconds
  file_name text not null,
  file_url text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create feedback table (anonymous)
alter table public.feedback 
drop constraint if exists feedback_wellbeing_change_check,
add constraint feedback_wellbeing_change_fkey 
  foreign key (wellbeing_change) 
  references wellbeing_options(value);

-- Set up Row Level Security (RLS)
alter table public.meditations enable row level security;
alter table public.feedback enable row level security;

-- Meditations policies
create policy "Meditations are viewable by everyone" 
on public.meditations
for select 
using (true);

-- Drop the user_id column from feedback table
alter table public.feedback drop column if exists user_id;

-- Drop existing policies
drop policy if exists "Users can create feedback" on public.feedback;
drop policy if exists "Users can view own feedback" on public.feedback;

-- Feedback policies - allow anonymous submissions
create policy if not exists "Anyone can submit feedback"
on public.feedback
for insert
using (true)
with check (true);

-- Drop unused index
drop index if exists public.feedback_user_id_idx;

-- Ensure the meditation_id index exists
create index if not exists feedback_meditation_id_idx on public.feedback(meditation_id);

-- Create indexes for better query performance
create index meditations_created_at_idx on public.meditations(created_at desc);

-- Insert sample meditation data
INSERT INTO public.meditations (title, duration, file_name, file_url) VALUES
('10 Minute Meditation', 600, '10 minutter/meditation_10min.mp3', 'https://your-bucket.supabase.co/storage/v1/object/public/lydfiler-til-nsdr/10%20minutter/meditation_10min.mp3'),
('20 Minute Meditation', 1200, '20 minutter/meditation_20min.mp3', 'https://your-bucket.supabase.co/storage/v1/object/public/lydfiler-til-nsdr/20%20minutter/meditation_20min.mp3'),
('30 Minute Meditation', 1800, '30 minutter/meditation_30min.mp3', 'https://your-bucket.supabase.co/storage/v1/object/public/lydfiler-til-nsdr/30%20minutter/meditation_30min.mp3');


-- Create a function to sync storage files with meditations table
create or replace function sync_meditations_from_storage()
returns trigger
language plpgsql
security definer
as $$
begin
  -- Insert new meditation record when a file is uploaded
  if (TG_OP = 'INSERT') then
    insert into public.meditations (
      title,
      duration,
      file_name,
      file_url
    ) values (
      -- Extract title from filename (remove extension)
      regexp_replace(NEW.name, '\.[^.]*$', ''),
      -- Extract duration from path or filename (e.g., '20 min' -> 1200 seconds)
      (regexp_match(coalesce(NEW.name, NEW.path), '(\d+)\s*min'))[1]::integer * 60,
      NEW.name,
      storage.url(NEW.path || '/' || NEW.name)
    );
  end if;
  return NEW;
end;
$$;

-- Create trigger on storage changes
drop trigger if exists sync_meditations_trigger on storage.objects;
create trigger sync_meditations_trigger
after insert on storage.objects
for each row
when (NEW.bucket_id = 'lydfiler-til-nsdr' and (NEW.name like '%.mp3' or NEW.name like '%.wav'))
execute function sync_meditations_from_storage();